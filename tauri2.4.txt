# https://v2.tauri.app/concept/ llms-full.txt

## Tauri Architecture Overview
[Skip to content](https://v2.tauri.app/concept/architecture/#_top)

# Tauri Architecture

## [Introduction](https://v2.tauri.app/concept/architecture/\#introduction)

Tauri is a polyglot and generic toolkit that is very composable and allows engineers to make a wide variety of applications. It is used for building applications for desktop computers using a combination of Rust tools and HTML rendered in a Webview. Apps built with Tauri can ship with any number of pieces of an optional JS API and Rust API so that webviews can control the system via message passing. Developers can extend the default API with their own functionality and bridge the Webview and Rust-based backend easily.

Tauri apps can have [tray-type interfaces](https://v2.tauri.app/learn/system-tray/). They can be [updated](https://v2.tauri.app/plugin/updater/) and are managed by the user’s operating system as expected. They are very small because they use the OS’s webview. They do not ship a runtime since the final binary is compiled from Rust. This makes the [reversing of Tauri apps not a trivial task](https://v2.tauri.app/security/).

### [What Tauri is Not](https://v2.tauri.app/concept/architecture/\#what-tauri-is-not)

Tauri is not a lightweight kernel wrapper. Instead, it directly uses [WRY](https://v2.tauri.app/concept/architecture/#wry) and [TAO](https://v2.tauri.app/concept/architecture/#tao) to do the heavy lifting in making system calls to the OS.

Tauri is not a VM or virtualized environment. Instead, it is an application toolkit that allows making Webview OS applications.

## [Core Ecosystem](https://v2.tauri.app/concept/architecture/\#core-ecosystem)

![Diagram](https://v2.tauri.app/d2/docs/concept/architecture-0.svg)Simplified representation of the Tauri architecture.

### [tauri](https://v2.tauri.app/concept/architecture/\#tauri)

[View on GitHub](https://github.com/tauri-apps/tauri/tree/dev/crates/tauri)

This is the major crate that holds everything together. It brings the runtimes, macros, utilities and API into one final product. It reads the [`tauri.conf.json`](https://v2.tauri.app/reference/config/) file at compile time to bring in features and undertake the actual configuration of the app (and even the `Cargo.toml` file in the project’s folder). It handles script injection (for polyfills / prototype revision) at runtime, hosts the API for systems interaction, and even manages the updating process.

### [tauri-runtime](https://v2.tauri.app/concept/architecture/\#tauri-runtime)

[View on GitHub](https://github.com/tauri-apps/tauri/tree/dev/crates/tauri-runtime)

The glue layer between Tauri itself and lower-level webview libraries.

### [tauri-macros](https://v2.tauri.app/concept/architecture/\#tauri-macros)

[View on GitHub](https://github.com/tauri-apps/tauri/tree/dev/crates/tauri-macros)

Creates macros for the context, handler, and commands by leveraging the [`tauri-codegen`](https://github.com/tauri-apps/tauri/tree/dev/crates/tauri-codegen) crate.

### [tauri-utils](https://v2.tauri.app/concept/architecture/\#tauri-utils)

[View on GitHub](https://github.com/tauri-apps/tauri/tree/dev/crates/tauri-utils)

Common code that is reused in many places and offers useful utilities like parsing configuration files, detecting platform triples, injecting the CSP, and managing assets.

### [tauri-build](https://v2.tauri.app/concept/architecture/\#tauri-build)

[View on GitHub](https://github.com/tauri-apps/tauri/tree/dev/crates/tauri-build)

Applies the macros at build-time to rig some special features needed by `cargo`.

### [tauri-codegen](https://v2.tauri.app/concept/architecture/\#tauri-codegen)

[View on GitHub](https://github.com/tauri-apps/tauri/tree/dev/crates/tauri-codegen)

Embeds, hashes, and compresses assets, including icons for the app as well as the system tray. Parses [`tauri.conf.json`](https://v2.tauri.app/reference/config/) at compile time and generates the Config struct.

### [tauri-runtime-wry](https://v2.tauri.app/concept/architecture/\#tauri-runtime-wry)

[View on GitHub](https://github.com/tauri-apps/tauri/tree/dev/crates/tauri-runtime-wry)

This crate opens up direct systems-level interactions specifically for WRY, such as printing, monitor detection, and other windowing-related tasks.

## [Tauri Tooling](https://v2.tauri.app/concept/architecture/\#tauri-tooling)

### [API (JavaScript / TypeScript)](https://v2.tauri.app/concept/architecture/\#api-javascript--typescript)

[View on GitHub](https://github.com/tauri-apps/tauri/tree/dev/packages/api)

A typescript library that creates `cjs` and `esm` JavaScript endpoints for you to import into your frontend framework so that the Webview can call and listen to backend activity. Also ships in pure typescript, because for some frameworks this is more optimal. It uses the message passing of webviews to their hosts.

### [Bundler (Rust / Shell)](https://v2.tauri.app/concept/architecture/\#bundler-rust--shell)

[View on GitHub](https://github.com/tauri-apps/tauri/tree/dev/crates/tauri-bundler)

A library that builds a Tauri app for the platform it detects or is told. Currently supports macOS, Windows and Linux - but in the near future will support mobile platforms as well. May be used outside of Tauri projects.

### [cli.rs (Rust)](https://v2.tauri.app/concept/architecture/\#clirs-rust)

[View on GitHub](https://github.com/tauri-apps/tauri/tree/dev/crates/tauri-cli)

This Rust executable provides the full interface to all of the required activities for which the CLI is required. It runs on macOS, Windows, and Linux.

### [cli.js (JavaScript)](https://v2.tauri.app/concept/architecture/\#clijs-javascript)

[View on GitHub](https://github.com/tauri-apps/tauri/tree/dev/packages/cli)

Wrapper around [`cli.rs`](https://github.com/tauri-apps/tauri/blob/dev/crates/tauri-cli) using [`napi-rs`](https://github.com/napi-rs/napi-rs) to produce npm packages for each platform.

### [create-tauri-app (JavaScript)](https://v2.tauri.app/concept/architecture/\#create-tauri-app-javascript)

[View on GitHub](https://github.com/tauri-apps/create-tauri-app)

A toolkit that will enable engineering teams to rapidly scaffold out a new `tauri-apps` project using the frontend framework of their choice (as long as it has been configured).

## [Upstream Crates](https://v2.tauri.app/concept/architecture/\#upstream-crates)

The Tauri-Apps organization maintains two “upstream” crates from Tauri, namely TAO for creating and managing application windows, and WRY for interfacing with the Webview that lives within the window.

### [TAO](https://v2.tauri.app/concept/architecture/\#tao)

[View on GitHub](https://github.com/tauri-apps/tao)

Cross-platform application window creation library in Rust that supports all major platforms like Windows, macOS, Linux, iOS and Android. Written in Rust, it is a fork of [winit](https://github.com/rust-windowing/winit) that we have extended for our own needs - like menu bar and system tray.

### [WRY](https://v2.tauri.app/concept/architecture/\#wry)

[View on GitHub](https://github.com/tauri-apps/wry)

WRY is a cross-platform WebView rendering library in Rust that supports all major desktop platforms like Windows, macOS, and Linux.
Tauri uses WRY as the abstract layer responsible to determine which webview is used (and how interactions are made).

## [Additional Tooling](https://v2.tauri.app/concept/architecture/\#additional-tooling)

### [tauri-action](https://v2.tauri.app/concept/architecture/\#tauri-action)

[View on GitHub](https://github.com/tauri-apps/tauri-action)

GitHub workflow that builds Tauri binaries for all platforms. Even allows creating a (very basic) Tauri app even if Tauri is not set up.

### [tauri-vscode](https://v2.tauri.app/concept/architecture/\#tauri-vscode)

[View on GitHub](https://github.com/tauri-apps/tauri-vscode)

This project enhances the Visual Studio Code interface with several nice-to-have features.

### [vue-cli-plugin-tauri](https://v2.tauri.app/concept/architecture/\#vue-cli-plugin-tauri)

[View on GitHub](https://github.com/tauri-apps/vue-cli-plugin-tauri)

Allows you to very quickly install Tauri in a vue-cli project.

## [Plugins](https://v2.tauri.app/concept/architecture/\#plugins)

[Tauri Plugin Guide](https://v2.tauri.app/develop/plugins/)

Generally speaking, plugins are authored by third parties (even though there may be official, supported plugins). A plugin generally does 3 things:

1. Enables Rust code to do “something”.
2. Provides interface glue to make it easy to integrate into an app.
3. Provides a JavaScript API for interfacing with the Rust code.

Here are some examples of Tauri Plugins:

- [tauri-plugin-fs](https://github.com/tauri-apps/tauri-plugin-fs)
- [tauri-plugin-sql](https://github.com/tauri-apps/tauri-plugin-sql)
- [tauri-plugin-stronghold](https://github.com/tauri-apps/tauri-plugin-stronghold)

## [License](https://v2.tauri.app/concept/architecture/\#license)

Tauri itself is licensed under MIT or Apache-2.0. If you repackage it and modify any source code, it is your responsibility to verify that you are complying with all upstream licenses. Tauri is provided AS-IS with no explicit claim for suitability for any purpose.

Here you may peruse our [Software Bill of Materials](https://app.fossa.com/projects/git%2Bgithub.com%2Ftauri-apps%2Ftauri).

* * *

© 2025 Tauri Contributors. CC-BY / MIT

## Tauri App Size
[Skip to content](https://v2.tauri.app/concept/size/#_top)

# App Size

While Tauri by default provides very small binaries it doesn’t hurt to push the limits a bit, so here are some tips and tricks for reaching optimal results.

## [Cargo Configuration](https://v2.tauri.app/concept/size/\#cargo-configuration)

One of the simplest frontend agnostic size improvements you can do to your project is adding a Cargo profile to it.

Dependent on whether you use the stable or nightly Rust toolchain the options available to you differ a bit. It’s recommended you stick to the stable toolchain unless you’re an advanced user.

- [Stable](https://v2.tauri.app/concept/size/#tab-panel-298)
- [Nightly](https://v2.tauri.app/concept/size/#tab-panel-299)

```

[profile.dev]

incremental = true # Compile your binary in smaller steps.

[profile.release]

codegen-units = 1 # Allows LLVM to perform better optimization.

lto = true # Enables link-time-optimizations.

opt-level = "s" # Prioritizes small binary size. Use `3` if you prefer speed.

panic = "abort" # Higher performance by disabling panic handlers.

strip = true # Ensures debug symbols are removed.
```

```

[profile.dev]

incremental = true # Compile your binary in smaller steps.

rustflags = ["-Zthreads=8"] # Better compile performance.

[profile.release]

codegen-units = 1 # Allows LLVM to perform better optimization.

lto = true # Enables link-time-optimizations.

opt-level = "s" # Prioritizes small binary size. Use `3` if you prefer speed.

panic = "abort" # Higher performance by disabling panic handlers.

strip = true # Ensures debug symbols are removed.

trim-paths = "all" # Removes potentially privileged information from your binaries.

rustflags = ["-Cdebuginfo=0", "-Zthreads=8"] # Better compile performance.
```

### [References](https://v2.tauri.app/concept/size/\#references)

- [incremental:](https://doc.rust-lang.org/cargo/reference/profiles.html#incremental) Compile your binary in smaller steps.
- [codegen-units:](https://doc.rust-lang.org/cargo/reference/profiles.html#codegen-units) Speeds up compile times at the cost of compile time optimizations.
- [lto:](https://doc.rust-lang.org/cargo/reference/profiles.html#lto) Enables link time optimizations.
- [opt-level:](https://doc.rust-lang.org/cargo/reference/profiles.html#opt-level) Determines the focus of the compiler. Use `3` to optimize performance, `z` to optimize for size, and `s` for something in-between.
- [panic:](https://doc.rust-lang.org/cargo/reference/profiles.html#panic) Reduce size by removing panic unwinding.
- [strip:](https://doc.rust-lang.org/cargo/reference/profiles.html#strip) Strip either symbols or debuginfo from a binary.
- [rpath:](https://doc.rust-lang.org/cargo/reference/profiles.html#rpath) Assists in finding the dynamic libraries the binary requires by hard coding information into the binary.
- [trim-paths:](https://rust-lang.github.io/rfcs/3127-trim-paths.html) Removes potentially privileged information from binaries.
- [rustflags:](https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#profile-rustflags-option) Sets Rust compiler flags on a profile by profile basis.

  - `-Cdebuginfo=0`: Whether debuginfo symbols should be included in the build.
  - `-Zthreads=8`: Increases the number of threads used during compilation.

## [Remove Unused Commands](https://v2.tauri.app/concept/size/\#remove-unused-commands)

In Pull Request [`feat: add a new option to remove unused commands`](https://github.com/tauri-apps/tauri/pull/12890), we added in a new option in the tauri config file

```

{

  "build": {

    "removeUnusedCommands": true

  }

}
```

to remove commands that’re never allowed in your capability files (ACL), so you don’t have to pay for what you don’t use

How does it work under the hood?

`tauri-cli` will communicate with `tauri-build` and the build script of `tauri`, `tauri-plugin` through an environment variable
and let them generate a list of allowed commands from the ACL,
this will then be used by the `generate_handler` macro to remove unused commands based on that

An internal detial is this environment variable is currently `REMOVE_UNUSED_COMMANDS`,
and it’s set to project’s directory, usually the `src-tauri` directory, this is used for the build scripts to find the capability files,
and although it’s not encouraged, you can still set this environment variable yourself if you can’t or don’t want to use `tauri-cli` to get this to work
( **do note that as this is an implementation detail, we don’t guarantee the stability of it**)

* * *

© 2025 Tauri Contributors. CC-BY / MIT

## Tauri Process Model
[Skip to content](https://v2.tauri.app/concept/process-model/#_top)

# Process Model

Tauri employs a multi-process architecture similar to Electron or many modern web browsers. This guide explores the reasons behind the design choice and why it is key to writing secure applications.

## [Why Multiple Processes?](https://v2.tauri.app/concept/process-model/\#why-multiple-processes)

In the early days of GUI applications, it was common to use a single process to perform computation, draw the interface and react to user input. As you can probably guess, this meant that a long-running, expensive computation would leave the user interface unresponsive, or worse, a failure in one app component would bring the whole app crashing down.

It became clear that a more resilient architecture was needed, and applications began running different components in different processes. This makes much better use of modern multi-core CPUs and creates far safer applications. A crash in one component doesn’t affect the whole system anymore, as components are isolated on different processes. If a process gets into an invalid state, we can easily restart it.

We can also limit the blast radius of potential exploits by handing out only the minimum amount of permissions to each process, just enough so they can get their job done. This pattern is known as the [Principle of Least Privilege](https://en.wikipedia.org/wiki/Principle_of_least_privilege), and you see it in the real world all the time. If you have a gardener coming over to trim your hedge, you give them the key to your garden. You would **not** give them the keys to your house; why would they need access to that? The same concept applies to computer programs. The less access we give them, the less harm they can do if they get compromised.

## [The Core Process](https://v2.tauri.app/concept/process-model/\#the-core-process)

Each Tauri application has a core process, which acts as the application’s entry point and which is the only component with full access to the operating system.

The Core’s primary responsibility is to use that access to create and orchestrate application windows, system-tray menus, or notifications. Tauri implements the necessary cross-platform abstractions to make this easy. It also routes all [Inter-Process Communication](https://v2.tauri.app/concept/inter-process-communication/) through the Core process, allowing you to intercept, filter, and manipulate IPC messages in one central place.

The Core process should also be responsible for managing global state, such as settings or database connections. This allows you to easily synchronize state between windows and protect your business-sensitive data from prying eyes in the Frontend.

We chose Rust to implement Tauri because of its concept of [Ownership](https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html)
guarantees memory safety while retaining excellent performance.

![Diagram](https://v2.tauri.app/d2/docs/concept/process-model-0.svg)Simplified representation of the Tauri process model. A single Core process manages one or more WebView processes.

## [The WebView Process](https://v2.tauri.app/concept/process-model/\#the-webview-process)

The Core process doesn’t render the actual user interface (UI) itself; it spins up WebView processes that leverage WebView libraries provided by the operating system. A WebView is a browser-like environment that executes your HTML, CSS, and JavaScript.

This means that most of your techniques and tools used in traditional web development can be used to create Tauri applications. For example, many Tauri examples are written using the [Svelte](https://svelte.dev/) frontend framework and the [Vite](https://vitejs.dev/) bundler.

Security best practices apply as well; for example, you must always sanitize user input, never handle secrets in the Frontend, and ideally defer as much business logic as possible to the Core process to keep your attack surface small.

Unlike other similar solutions, the WebView libraries are **not** included in your final executable but dynamically linked at runtime[1](https://v2.tauri.app/concept/process-model/#user-content-fn-1). This makes your application _significantly_ smaller, but it also means that you need to keep platform differences in mind, just like traditional web development.

## [Footnotes](https://v2.tauri.app/concept/process-model/\#footnote-label)

1. Currently, Tauri uses [Microsoft Edge WebView2](https://docs.microsoft.com/en-us/microsoft-edge/webview2/) on Windows, [WKWebView](https://developer.apple.com/documentation/webkit/wkwebview) on
macOS and [webkitgtk](https://webkitgtk.org/) on Linux. [↩](https://v2.tauri.app/concept/process-model/#user-content-fnref-1)


* * *

© 2025 Tauri Contributors. CC-BY / MIT

## Inter-Process Communication
[Skip to content](https://v2.tauri.app/concept/inter-process-communication/#_top)

# Inter-Process Communication

Inter-Process Communication (IPC) allows isolated processes to communicate securely and is key to building more complex applications.

Learn more about the specific IPC patterns in the following guides:

[Brownfield](https://v2.tauri.app/concept/inter-process-communication/brownfield/)

[Isolation](https://v2.tauri.app/concept/inter-process-communication/isolation/)

Tauri uses a particular style of Inter-Process Communication called [Asynchronous Message Passing](https://en.wikipedia.org/wiki/Message_passing#Asynchronous_message_passing), where processes exchange _requests_ and _responses_ serialized using some simple data representation. Message Passing should sound familiar to anyone with web development experience, as this paradigm is used for client-server communication on the internet.

Message passing is a safer technique than shared memory or direct function access because the recipient is free to reject or discard requests as it sees fit. For example, if the Tauri Core process determines a request to be malicious, it simply discards the requests and never executes the corresponding function.

In the following, we explain Tauri’s two IPC primitives - `Events` and `Commands` \- in more detail.

## [Events](https://v2.tauri.app/concept/inter-process-communication/\#events)

Events are fire-and-forget, one-way IPC messages that are best suited to communicate lifecycle events and state changes. Unlike [Commands](https://v2.tauri.app/concept/inter-process-communication/#commands), Events can be emitted by both the Frontend _and_ the Tauri Core.

![Diagram](https://v2.tauri.app/d2/docs/concept/Inter-Process%20Communication/index-0.svg)Events sent between the Core and the Webview.

## [Commands](https://v2.tauri.app/concept/inter-process-communication/\#commands)

Tauri also provides a [foreign function interface](https://en.wikipedia.org/wiki/Foreign_function_interface)-like abstraction on top of IPC messages[1](https://v2.tauri.app/concept/inter-process-communication/#user-content-fn-1). The primary API, `invoke`, is similar to the browser’s `fetch` API and allows the Frontend to invoke Rust functions, pass arguments, and receive data.

Because this mechanism uses a [JSON-RPC](https://www.jsonrpc.org/) like protocol under the hood to serialize requests and responses, all arguments and return data must be serializable to JSON.

![Diagram](https://v2.tauri.app/d2/docs/concept/Inter-Process%20Communication/index-1.svg)IPC messages involved in a command invocation.

## [Footnotes](https://v2.tauri.app/concept/inter-process-communication/\#footnote-label)

1. Because Commands still use message passing under the hood, they do not share the same security pitfalls as real FFI interfaces do. [↩](https://v2.tauri.app/concept/inter-process-communication/#user-content-fnref-1)


* * *

© 2025 Tauri Contributors. CC-BY / MIT

## Tauri Isolation Pattern
[Skip to content](https://v2.tauri.app/concept/inter-process-communication/isolation/#_top)

# Isolation Pattern

The Isolation pattern is a way to intercept and modify Tauri API messages sent by the frontend before they get to Tauri Core, all with JavaScript. The secure JavaScript code that is injected by the Isolation pattern is referred to as the Isolation application.

## [Why](https://v2.tauri.app/concept/inter-process-communication/isolation/\#why)

The Isolation pattern’s purpose is to provide a mechanism for developers to help protect their application from unwanted or malicious frontend calls to Tauri Core. The need for the Isolation pattern rose out of threats coming from untrusted content running on the frontend, a common case for applications with many dependencies. See [Security: Threat Models](https://v2.tauri.app/security/lifecycle/) for a list of many sources of threats that an application may see.

The largest threat model described above that the Isolation pattern was designed in mind was Development Threats. Not only do many frontend build-time tools consist of many dozen (or hundreds) of often deeply-nested dependencies, but a complex application may also have a large amount of (also often deeply-nested) dependencies that are bundled into the final output.

## [When](https://v2.tauri.app/concept/inter-process-communication/isolation/\#when)

Tauri highly recommends using the isolation pattern whenever it can be used. Because the Isolation application intercepts _**all**_ messages from the frontend, it can _always_ be used.

Tauri also strongly suggests locking down your application whenever you use external Tauri APIs. As the developer, you can utilize the secure Isolation application to try and verify IPC inputs, to make sure they are within some expected parameters. For example, you may want to check that a call to read or write a file is not trying to access a path outside your application’s expected locations. Another example is making sure that a Tauri API HTTP fetch call is only setting the Origin header to what your application expects it to be.

That said, it intercepts _**all**_ messages from the frontend, so it will even work with always-on APIs such as [Events](https://v2.tauri.app/reference/javascript/api/namespaceevent/). Since some events may cause your own rust code to perform actions, the same sort of validation techniques can be used with them.

## [How](https://v2.tauri.app/concept/inter-process-communication/isolation/\#how)

The Isolation pattern is all about injecting a secure application in between your frontend and Tauri Core to intercept and modify incoming IPC messages. It does this by using the sandboxing feature of `<iframe>` s to run the JavaScript securely alongside the main frontend application. Tauri enforces the Isolation pattern while loading the page, forcing all IPC calls to Tauri Core to instead be routed through the sandboxed Isolation application first. Once the message is ready to be passed to Tauri Core, it is encrypted using the browser’s [SubtleCrypto](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto) implementation and passed back to the main frontend application. Once there, it is directly passed to Tauri Core, where it is then decrypted and read like normal.

To ensure that someone cannot manually read the keys for a specific version of your application and use that to modify the messages after being encrypted, new keys are generated each time your application is run.

### [Approximate Steps of an IPC Message](https://v2.tauri.app/concept/inter-process-communication/isolation/\#approximate-steps-of-an-ipc-message)

To make it easier to follow, here’s an ordered list with the approximate steps an IPC message will go through when being sent to Tauri Core with the Isolation pattern:

1. Tauri’s IPC handler receives a message
2. IPC handler -> Isolation application
3. `[sandbox]` Isolation application hook runs and potentially modifies the message
4. `[sandbox]` Message is encrypted with AES-GCM using a runtime-generated key
5. `[encrypted]` Isolation application -> IPC handler
6. `[encrypted]` IPC handler -> Tauri Core

_Note: Arrows (->) indicate message passing._

### [Performance Implications](https://v2.tauri.app/concept/inter-process-communication/isolation/\#performance-implications)

Because encryption of the message does occur, there are additional overhead costs compared to the [Brownfield pattern](https://v2.tauri.app/concept/inter-process-communication/brownfield/), even if the secure Isolation application doesn’t do anything. Aside from performance-sensitive applications (who likely have a carefully-maintained and small set of dependencies, to keep the performance adequate), most applications should not notice the runtime costs of encrypting/decrypting the IPC messages, as they are relatively small and AES-GCM is relatively fast. If you are unfamiliar with AES-GCM, all that is relevant in this context is that it’s the only authenticated mode algorithm included in [SubtleCrypto](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto) and that you probably already use it every day under the hood with [TLS](https://en.wikipedia.org/wiki/Transport_Layer_Security).

There is also a cryptographically secure key generated once each time the Tauri application is started. It is not generally noticeable if the system already has enough entropy to immediately return enough random numbers, which is extremely common for desktop environments. If running in a headless environment to perform some [integration testing with WebDriver](https://v2.tauri.app/develop/tests/webdriver/) then you may want to install some sort of entropy-generating service such as `haveged` if your operating system does not have one included. Linux 5.6 (March 2020) now includes entropy generation using speculative execution.

### [Limitations](https://v2.tauri.app/concept/inter-process-communication/isolation/\#limitations)

There are a few limitations in the Isolation pattern that arose out of platform inconsistencies. The most significant limitation is due to external files not loading correctly inside sandboxed `<iframes>` on Windows. Because of this, we have implemented a simple script inlining step during build time that takes the content of scripts relative to the Isolation application and injects them inline. This means that typical bundling or simple including of files like `<script src="index.js"></script>` still works properly, but newer mechanisms such as ES Modules will _not_ successfully load.

## [Recommendations](https://v2.tauri.app/concept/inter-process-communication/isolation/\#recommendations)

Because the point of the Isolation application is to protect against Development Threats, we highly recommend keeping your Isolation application as simple as possible. Not only should you strive to keep dependencies minimal, but you should also consider keeping required build steps minimal. This would allow you to not need to worry about supply chain attacks against your Isolation application on top of your frontend application.

## [Creating the Isolation Application](https://v2.tauri.app/concept/inter-process-communication/isolation/\#creating-the-isolation-application)

In this example, we will make a small hello-world style Isolation application and hook it up to an imaginary existing Tauri application. It will do no verification of the messages passing through it, only print the contents to the WebView console.

For the purposes of this example, let’s imagine we are in the same directory as `tauri.conf.json`. The existing Tauri application has it’s `distDir` set to `../dist`.

`../dist-isolation/index.html`:

```

<!doctype html>

<html lang="en">

  <head>

    <meta charset="UTF-8" />

    <title>Isolation Secure Script</title>

  </head>

  <body>

    <script src="index.js"></script>

  </body>

</html>
```

`../dist-isolation/index.js`:

```

window.__TAURI_ISOLATION_HOOK__ = (payload) => {

  // let's not verify or modify anything, just print the content from the hook

  console.log('hook', payload);

  return payload;

};
```

Now, all we need to do is set up our `tauri.conf.json` [configuration](https://v2.tauri.app/concept/inter-process-communication/isolation/#configuration) to use the Isolation pattern, and have just bootstrapped to the Isolation pattern from the [Brownfield pattern](https://v2.tauri.app/concept/inter-process-communication/brownfield/).

## [Configuration](https://v2.tauri.app/concept/inter-process-communication/isolation/\#configuration)

Let’s assume that our main frontend `distDir` is set to `../dist`. We also output our Isolation application to `../dist-isolation`.

```

{

  "build": {

    "distDir": "../dist"

  },

  "app": {

    "security": {

      "pattern": {

        "use": "isolation",

        "options": {

          "dir": "../dist-isolation"

        }

      }

    }

  }

}
```

* * *

© 2025 Tauri Contributors. CC-BY / MIT

## Brownfield Pattern
[Skip to content](https://v2.tauri.app/concept/inter-process-communication/brownfield/#_top)

# Brownfield Pattern

_**This is the default pattern.**_

This is the simplest and most straightforward pattern to use Tauri with, because it tries to be as compatible as possible with existing frontend projects. In short, it tries to require nothing
additional to what an existing web frontend might use inside a browser.
Not _**everything**_ that works in existing browser applications will work out-of-the-box.

If you are unfamiliar with Brownfield software development in general, the [Brownfield Wikipedia article](https://en.wikipedia.org/wiki/Brownfield_(software_development))
provides a nice summary. For Tauri, the existing software is current browser support and behavior, instead of
legacy systems.

## [Configuration](https://v2.tauri.app/concept/inter-process-communication/brownfield/\#configuration)

Because the Brownfield pattern is the default pattern, it doesn’t require a configuration option to be set. To explicitly set
it, you can use the `tauri > pattern` object in the `tauri.conf.json` configuration file.

```

{

  "tauri": {

    "pattern": {

      "use": "brownfield"

    }

  }

}
```

_**There are no additional configuration options for the brownfield pattern.**_

* * *

© 2025 Tauri Contributors. CC-BY / MIT

